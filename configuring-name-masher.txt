# Configuring

Name Masher configuration comes in 3 elements: the config file, (config.json), schemas (files in the schema directory)
and text word files, which are simple .txt files containing 1 word on each line.

# config.json

config.json contains 2 relevant pieces of information. The "default_schema" field contains a file path to the schema
which Name Masher will load by default. the field "schemas" contains a dictionary of file paths to additional schemas
which can be loaded by Name Masher, with the name they should be referenced by as the key.

Do not use the key default for an entry in the "schemas" dictionary, as it is used to store the default schema at runtime.

# schemas

Schemas are currently stored in a less than straight forward format (see below) but will eventually be updated to an
XML format which should be more user-friendly. A schemas is parsed into various types of "generator" objects.
The generator classes are implemented using a composite patter, where a single top-level "PhraseGenerator" object, is
returned from the default parser used by Name Masher.

Each line in a schema file will create one generator; these generators may be either leaves or composite generators.
Each line terminates in a semi-colin, except the final line, which does no need a semi-colin.
The following is examples of schemas, where any text surrounded by square brackets [example] is a description of the text
that should be placed there, and a ... indicates a continuing pattern. Patterns have separating characters which separate
entries in the pattern from each other such as the " && " separator in the ListGenerator schema. These are whitespace
sensitive, and should included only between entries, not after the final entry in a pattern.
Otherwise the formatting should be copied exactly.

Because of the way the schema parsing is currently implemented, no schema can be implemented nested under a schema of
the same type if the schema contains any separators characters.

# constant generator schemas
"[text]"
Constant generators will return the same word every time they are invoked. The schema to designate a constant generator
can use either single or double quotes interchangeably. It is recomended that constants be ended with whitespace, to
separate them from the following word.

# list generator schemas
<[text file name] && [text file name] ...>
separator: " && "
list generators will randomly select a single word from their word set, with weight. The wordset is generated from the
given text file(s), appending each successive file's words to the wordset in order. Repeated words will be repeated in
the wordset, effectively increasing the offs they are selected.

# random chance schemas
?([chance], [schema1], [schema2])
separator: ", "
random chance schemas will randomly select between the two nested schemas entered. The chance value is a decimal number
1 > x > 0, which is the probability of schema1 being selected.

# phrase schemas
{[schema] | [schema] ...}
separator: " | "
phrase schemas contain several other schemas. When invoked, the phrase generator will return a string starting with the
string generated by the first generator, then appending the results from each additional generator after that.